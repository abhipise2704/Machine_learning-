# -*- coding: utf-8 -*-
"""ner__emsi__api.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/15s90jXMXWg5uYseae2plzPSfvkOTqjBu
"""

import matplotlib
matplotlib.use('Agg')

data_dict={'text':["Proven experience as a Data Scientist or Data Analyst Experience in data\
 mining Understanding of machine-learning and operations research Knowledge of R, SQL and \
 Python; familiarity with Scala, Java or C++ is an asset Experience using business \
 intelligence tools (e.g. Tableau) and data frameworks (e.g. Hadoop) Analytical mind and \
 business acumen Strong math skills e.g. statistics, algebra",

"Strong understanding of JavaScript, its quirks, and workarounds Basic understanding \
of web markup, \
 including HTML5 and CSS3 Good understanding of \
 {{Depending on the specific case, a developer should have the knowledge of \
 advanced JavaScript libraries and frameworks such as AngularJS, KnockoutJS, \
 BackboneJS, ReactJS, DurandalJS etc.}} Good understanding of asynchronous request\
  handling, partial page updates, \
 and AJAX Proficient understanding of cross-browser compatibility issues and ways to \
 work around such issues Familiarity\
  with JavaScript module loaders, such as Require.js and AMD Familiarity with\
   front-end build tools,\
   such as Grunt and Gulp.js Proficient understanding of code versioning tools,\
    such as {{Git / Mercurial / SVN}}\
    Good understanding of browser rendering behavior and performance"]}

import pandas as pd 
data=pd.DataFrame.from_dict(data_dict)
data.head()

import re

def decontracted(phrase):
    # specific
    phrase = re.sub(r"won't", "will not", phrase)
    phrase = re.sub(r"can\'t", "can not", phrase)

    # general
    phrase = re.sub(r"n\'t", " not", phrase)
    phrase = re.sub(r"\'re", " are", phrase)
    phrase = re.sub(r"\'s", " is", phrase)
    phrase = re.sub(r"\'d", " would", phrase)
    phrase = re.sub(r"\'ll", " will", phrase)
    phrase = re.sub(r"\'t", " not", phrase)
    phrase = re.sub(r"\'ve", " have", phrase)
    phrase = re.sub(r"\'m", " am", phrase)
    phrase = re.sub(r"[^A-Za-z0-9]+", ' ', phrase)
    return phrase


data['text']=data['text'].apply(decontracted)

data.head()

train_list=data['text']
print(train_list[0])

import requests

url = "https://auth.emsicloud.com/connect/token"

payload = "client_id=8g22ws124vnu1gcz&client_secret=ERMldj9G&grant_type=client_credentials&scope=emsi_open"
headers = {'Content-Type': 'application/x-www-form-urlencoded'}

response = requests.request("POST", url, data=payload, headers=headers)

token=response.text
print(response.text)

#json_data=json.loads(token)

#access_token=json_data['access_token']
#ACCESS_TOKEN=token[]

import json

response_dict=response.text

json_data=json.loads(token)

access_token=json_data['access_token']

type(access_token)











import textwrap



#tuple_temp





def emsi_skill_function(jd_text):
  input_dict={'text':jd_text}
  input_str=json.dumps(input_dict)
  payload=input_str

  url = "https://emsiservices.com/skills/versions/latest/extract/trace"

  headers = {'Authorization': 'Bearer '+ access_token,
             'Content-Type': "application/json"}
  
  response = requests.request("POST", url, data=payload, headers=headers)

  sample=response.text

  return sample

sample

TRAIN_DATA=[]

try:

  for i in range(data.shape[0]):
    jd_text = data['text'][i]
    sample = emsi_skill_function(jd_text)
    sample = json.loads(sample)
    print(sample)
    if("errors" not in sample.keys()):
      main_data=sample["data"]
      trace=main_data["trace"]


      list_middle_11=[]
      list_main_111_22=[]      
      enitity_dict={}
      
      for mini_j in trace:
        #print(mini_j["surfaceForm"])
        if(len(mini_j["classificationData"]["skills"])>0):
          list_middle_11.append((mini_j["surfaceForm"]['sourceStart'],
                                mini_j["surfaceForm"]['sourceEnd'],
                                mini_j["classificationData"]["skills"][0]["skill"]["name"]))
      enitity_dict["entities"]=list_middle_11
      list_main_111_22.append(data['text'][i])
      list_main_111_22.append(enitity_dict)
      tuple_temp=tuple(list_main_111_22)

      print("="*100)
      wrapper = textwrap.TextWrapper(width=50)
      string = wrapper.fill(text=tuple_temp[0])
      print("spacy ner format text for text {}::\n".format(i))
      print("-"*100)
      print("text:\n",string)
      print("="*100)
      #print(tuple_temp[1])
      for skill_print in tuple_temp[1]["entities"]:
        print(skill_print)  


except:
  print("error occured!!")



